# -*- mode: sh; -*-
# vim:filetype=sh

# A poor man's require.
function require() {
    source $HOME/.matilde/bash/lib/"$1.sh"
}

# Pretty print path.
function pretty-print-path() {
    echo $PATH | sed -e 's/:\{1,\}/ /g' | tr ' ' '\n'
}

# Add a path on the end of $PATH.
function pushp() {
    if [ -n "$1" ]; then
        export PATH="$PATH:$1"
    fi
    pretty-print-path
}

# Add a path to the beginning of $PATH.
#function unshiftp() {
#    if [ -n "$1" ]; then
#        export PATH="$1:$PATH"
#    fi
#    pretty-print-path
#}

# Remove a path from the end $PATH.
function popp() {
    export PATH="$(pretty-print-path | init | tr '\n' ':' | sed -e "s/:$//")"
    pretty-print-path
}

# Remove a path from the beginning of $PATH.
function shiftp() {
    export PATH="$(pretty-print-path | init | tr '\n' ':' | sed -e "s/:$//")"
    pretty-print-path
}


# Like `cd` but creates the directory if it does not exist. Uses
# `mkdir -p` to create the directory.
function in-dir () {
    local dir=$1
    shift
    if [ -d $dir ]; then
      cd $dir
    else
      mkdir -p $dir
      cd $dir
      eval "$@"
    fi
}


# View a man page in Preview. Mind blowing.
function postman() {
    man -t $1 | open -f -a Preview.app
}

function tmate-show-ssh() {
    tmate show-messages | \
        # Pick the second to last line of the message.
        tail -2 | \
        head -1 | \
        # SSH field
        cut -d ":" -f 4 | \
        # Strip leading whitespace.
        sed -e "s/^ //"
}

function rubocop-git() {
    # --porcelain provides a programmer friendly status format.
    git status --porcelain | \
        # Select added and modified files.
        grep -e '^A\|^ M' | \
        # Select Ruby and Rake files.
        grep -e '\.\(rake\|rb\)$' | \
        # Select the file name. 
        cut -d ' ' -f 3 | \
        # Pass all of the file names as arguments to rubocop. 
        xargs rubocop
}
